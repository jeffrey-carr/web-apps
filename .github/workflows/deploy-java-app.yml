name: Deploy Java App

on:
  push:
    tags:
      - 'web_games-v*'
      - 'federation-v*'
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to run (e.g. federation-v1.2.3)"
        required: true
        type: string

run-name: Deploy ${{ (github.event_name == 'workflow_dispatch' && inputs.tag) || github.ref_name }}

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.extract.outputs.tag }}
      app: ${{ steps.extract.outputs.app }}
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Extract app/version from tag
        id: extract
        shell: bash
        run: |
          # Prefer manual input on workflow_dispatch, otherwise use the pushed tag name
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

          # Expect <app>-v<MAJOR>.<MINOR>.<PATCH>, e.g. federation-v1.2.3
          if [[ "$TAG" =~ ^([a-zA-Z0-9_-]+)-v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            APP="${BASH_REMATCH[1]}"
            VERSION="v${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.${BASH_REMATCH[4]}"
            echo "app=$APP" >> "$GITHUB_OUTPUT"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "Unrecognized app tag: $TAG"
            exit 1
          fi

  build-backend:
    runs-on: ubuntu-latest
    needs: [prep]
    environment: ${{ needs.prep.outputs.app }}
    env:
      TAG: ${{ needs.prep.outputs.tag }}
      APP: ${{ needs.prep.outputs.app }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '21'
          cache: 'maven'

      - name: Build common package
        working-directory: packages/java-common
        run: mvn -q clean install

      - name: Build JAR
        working-directory: apps/${{ env.APP }}/backend
        run: mvn -q clean install

      - name: Create backend folder
        run: mkdir -p backend

      - name: Remove original JAR
        working-directory: apps/${{ env.APP }}/backend
        run: rm -f target/*.original || true

      - name: Copy JAR
        run: cp apps/${{ env.APP }}/backend/target/*.jar backend/${{ env.APP }}-backend.jar

      - name: Create .env file
        env:
          MONGO_CONNECTION_URL: ${{ secrets.MONGO_CONNECTION_URL}}
        run: |
          touch backend/.env
          echo ENVIRONMENT=prod >> backend/.env
          echo MONGO_CONNECTION_URL="$MONGO_CONNECTION_URL" >> backend/.env

      - name: Zip backend artifact
        run: tar -cvf backend.tar backend

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend.tar
          path: backend.tar

  build-frontend:
    runs-on: ubuntu-latest
    needs: [prep]
    environment: ${{ needs.prep.outputs.app }}
    env:
      TAG: ${{ needs.prep.outputs.tag }}
      APP: ${{ needs.prep.outputs.app }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci 

      - name: Build project
        working-directory: apps/${{ env.APP }}/frontend
        run: npm run build 
        env:
          PUBLIC_ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          PUBLIC_BACKEND_URL: ${{ vars.BACKEND_URL }}

      - name: Move frontend build to artifacts
        run: mv "apps/${{ env.APP }}/frontend/build" frontend

      - name: Zip project build
        run: tar -cvf frontend.tar frontend

      - name: Upload project artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend.tar
          path: frontend.tar

  # This job CALLS a reusable workflow. It must NOT have runs-on/env/steps.
  deploy:
    needs: [prep, build-frontend, build-backend]
    uses: ./.github/workflows/deploy.yml
    with:
      app: ${{ needs.prep.outputs.app }}
      tag: ${{ needs.prep.outputs.tag }}
    secrets: inherit
